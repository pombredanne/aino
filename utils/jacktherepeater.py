#!/usr/bin/python2.4

"""
        Template files have the following format:

        /* blah blah */

        <CODE>

        int do_something(){
                int i = fubar();

                <REPEAT>
                        val_TOKEN = i;
                </REPEAT>

                return 0;
        }

        </CODE>

        - Only code inside <CODE>..</CODE> will be processed
        - Code within <REPEAT>..</REPEAT> blocks will be repeated
          for each input token.
        - TOKEN -tokens within the blocks are replaced by the
          input token.
        - Anything beginning with a dollar sign ($) is reserved
          for internal use.
"""

import sys, re, string, os.path

code_re  = re.compile('<CODE>(.*?)</CODE>', re.S)
rep_re   = re.compile('<REPEAT>(.*?)</REPEAT>', re.S)
clean_re = re.compile('\$__bc\d')
blocks   = {}

def parse_repeats():
        
        global code
        bc   = 0
        tmpl = code
        
        for r in rep_re.finditer(code):
                key  = "__bc%d" % bc
                tmpl = rep_re.sub("$"+key, tmpl, 1)
                blocks[key] = "%s$%s" % (r.groups(1)[0], key)
                bc   += 1
       
        return tmpl 


def add_tok(tok, tmpl):

        t   = string.Template(tmpl)
        rep = {}

        for k, b in blocks.items():
                rep[k] = b.replace("TOKEN", tok)
        
        return t.substitute(rep)

def run(src, tokens):

        global code, tmpl 

        code = code_re.search(file(str(src), 'r').read()).group(1)
        tmpl = parse_repeats()
        
        for tok in tokens:
        
                #print >> sys.stderr, "Adding token",tok
                tmpl = add_tok(tok, tmpl)

        return """
/* 
    Automatically generated by Jack The Repeater from %s
    Do not modify this file
*/
%s""" % (src, clean_re.sub("", tmpl))
        

def main():
        if len(sys.argv) < 2:
                print "USAGE: jacktherepeater.py SOURCE_TEMPLATE repl1 repl2 .."
                sys.exit(1)

        print run(sys.argv[1], sys.argv[2:])


def scons_action(target, source, env):
       
        txt = run(source[0], env['JTR_TOKENS'].split())

        f = file(str(target[0]), 'w')
        f.write(txt)
        f.close()
        
        return None

if __name__ == "__main__":
        main()





